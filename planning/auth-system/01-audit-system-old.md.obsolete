# Audit System Design

## Overview

The audit system is the foundation of the authentication system, ensuring all security-related operations are properly logged and monitored. It provides mandatory audit enforcement with compile-time and runtime guarantees.

## Core Components

### 1. Audit Events

```python
from enum import Enum
from dataclasses import dataclass
from typing import Any, Dict, Optional
from datetime import datetime

class AuditEventType(Enum):
    # Authentication Events
    AUTH_ATTEMPT = "auth.attempt"
    AUTH_SUCCESS = "auth.success" 
    AUTH_FAILURE = "auth.failure"
    AUTH_LOGOUT = "auth.logout"
    
    # Authorization Events
    AUTHZ_CHECK = "authz.check"
    AUTHZ_GRANT = "authz.grant"
    AUTHZ_DENY = "authz.deny"
    
    # Session Events
    SESSION_CREATE = "session.create"
    SESSION_REFRESH = "session.refresh"
    SESSION_EXPIRE = "session.expire"
    SESSION_DESTROY = "session.destroy"
    
    # User Events
    USER_CREATE = "user.create"
    USER_UPDATE = "user.update"
    USER_DELETE = "user.delete"
    USER_LOCK = "user.lock"
    USER_UNLOCK = "user.unlock"
    
    # Credential Events
    CREDENTIAL_CREATE = "credential.create"
    CREDENTIAL_UPDATE = "credential.update"
    CREDENTIAL_DELETE = "credential.delete"
    CREDENTIAL_VERIFY = "credential.verify"
    
    # Security Events
    SECURITY_VIOLATION = "security.violation"
    SECURITY_ANOMALY = "security.anomaly"

@dataclass
class AuditEvent:
    event_type: AuditEventType
    timestamp: datetime
    user_id: Optional[str]
    session_id: Optional[str]
    ip_address: Optional[str]
    user_agent: Optional[str]
    resource: Optional[str]
    action: Optional[str]
    result: str  # "success", "failure", "denied", etc.
    details: Dict[str, Any]
    risk_score: Optional[int] = None
    compliance_tags: List[str] = None
```

### 2. Audit Enforcement Decorators

```python
from typing import Set, Callable, Any
from functools import wraps

class AuditRequired:
    """Decorator that enforces audit event emission for methods."""
    
    def __init__(self, *required_events: AuditEventType):
        self.required_events = set(required_events)
        self.emitted_events = set()
    
    def __call__(self, func: Callable) -> Callable:
        @wraps(func)
        async def wrapper(*args, **kwargs):
            # Reset tracking for this call
            self.emitted_events.clear()
            
            # Inject audit emitter
            emitter = AuditEmitter(self)
            kwargs['audit_emitter'] = emitter
            
            try:
                result = await func(*args, **kwargs)
                
                # Check that all required events were emitted
                missing_events = self.required_events - self.emitted_events
                if missing_events:
                    raise AuditViolationException(
                        f"Method {func.__name__} failed to emit required audit events: {missing_events}"
                    )
                
                return result
            except Exception as e:
                # Ensure failure events are emitted
                if AuditEventType.AUTH_FAILURE in self.required_events:
                    emitter.emit(AuditEventType.AUTH_FAILURE, error=str(e))
                raise
                
        return wrapper

class AuditEmitter:
    """Helper class for emitting audit events."""
    
    def __init__(self, enforcement: AuditRequired):
        self.enforcement = enforcement
    
    def emit(self, event_type: AuditEventType, **details):
        """Emit an audit event."""
        # Mark event as emitted for enforcement
        self.enforcement.emitted_events.add(event_type)
        
        # Get audit provider from container and emit
        from bevy import get_container
        audit_provider = get_container().get(AuditProvider)
        audit_provider.log_event(AuditEvent(
            event_type=event_type,
            timestamp=datetime.utcnow(),
            details=details,
            # Additional context extracted from request/session
        ))
```

### 3. Base Audit Enforcement

```python
class AuditEnforcedMeta(type):
    """Metaclass that enforces audit requirements on subclasses."""
    
    def __new__(mcs, name, bases, namespace, **kwargs):
        # Collect audit requirements from parent classes
        inherited_requirements = {}
        for base in bases:
            if hasattr(base, '_audit_requirements'):
                inherited_requirements.update(base._audit_requirements)
        
        # Find audit-decorated methods in current class
        current_requirements = {}
        for attr_name, attr_value in namespace.items():
            if hasattr(attr_value, '_audit_required'):
                current_requirements[attr_name] = attr_value._audit_required
        
        # Check for inheritance violations
        for method_name, requirements in current_requirements.items():
            if method_name in inherited_requirements:
                parent_reqs = inherited_requirements[method_name]
                if requirements != parent_reqs:
                    raise AuditInheritanceViolation(
                        f"Method {name}.{method_name} cannot override audit requirements. "
                        f"Parent requires {parent_reqs}, child specifies {requirements}"
                    )
        
        # Merge requirements
        all_requirements = {**inherited_requirements, **current_requirements}
        namespace['_audit_requirements'] = all_requirements
        
        return super().__new__(mcs, name, bases, namespace, **kwargs)

class AuditEnforced(metaclass=AuditEnforcedMeta):
    """Base class for types that require audit enforcement."""
    pass
```

### 4. Audit Provider Interface

```python
from abc import ABC, abstractmethod

class AuditProvider(ABC):
    """Abstract base class for audit providers."""
    
    @abstractmethod
    async def log_event(self, event: AuditEvent) -> None:
        """Log an audit event."""
        pass
    
    @abstractmethod
    async def query_events(
        self, 
        start_time: datetime,
        end_time: datetime,
        event_types: Optional[Set[AuditEventType]] = None,
        user_id: Optional[str] = None,
        limit: int = 1000
    ) -> List[AuditEvent]:
        """Query audit events."""
        pass
    
    @abstractmethod
    async def get_security_metrics(
        self, 
        time_window: timedelta
    ) -> Dict[str, Any]:
        """Get security metrics for monitoring."""
        pass
```

## Audit Pipeline System

The authentication system uses a sophisticated pipeline-based audit requirement system that captures not just which events should occur, but the proper sequence and flow of operations.

### Pipeline Syntax

#### Basic Pipelines
```python
# Simple sequence: A then B then C  
AUTH_ATTEMPT >> AUTH_SUCCESS >> SESSION_CREATE

# Events must occur in this exact order
CREDENTIAL_VERIFY >> AUTH_SUCCESS >> SESSION_CREATE
```

#### OR Groups Within Pipelines
```python
# A then (B or C) - one of the events in parentheses must occur
AUTH_ATTEMPT >> (AUTH_SUCCESS | AUTH_FAILURE)

# Multiple options at any stage
AUTH_ATTEMPT >> CREDENTIAL_VERIFY >> (AUTH_SUCCESS | AUTH_FAILURE | RATE_LIMIT_EXCEEDED)
```

#### Multiple Valid Pipelines
```python
# Any one of these complete pipelines satisfies the requirement
AUTH_ATTEMPT >> AUTH_SUCCESS >> SESSION_CREATE |  # Success path
AUTH_ATTEMPT >> AUTH_FAILURE |                    # Failure path  
AUTH_ATTEMPT >> RATE_LIMIT_EXCEEDED              # Rate limit path
```

#### Complex Pipeline Examples
```python
# Authentication with multiple verification steps
@AuditRequired(
    AUTH_ATTEMPT >> CREDENTIAL_VERIFY >> MFA_CHALLENGE >> AUTH_SUCCESS >> SESSION_CREATE |
    AUTH_ATTEMPT >> CREDENTIAL_VERIFY >> AUTH_FAILURE |
    AUTH_ATTEMPT >> (RATE_LIMIT_EXCEEDED | ACCOUNT_LOCKED)
)

# Session management with conditional paths
@AuditRequired(
    SESSION_ACCESS >> (SESSION_VALID | SESSION_EXPIRED | SESSION_INVALID) |
    SESSION_ACCESS >> SESSION_REFRESH >> SESSION_VALID
)

# Complex authorization with fallbacks
@AuditRequired(
    PERMISSION_CHECK >> ACCESS_GRANTED |
    PERMISSION_CHECK >> ACCESS_DENIED |
    PERMISSION_CHECK >> ROLE_ESCALATION >> (ACCESS_GRANTED | ACCESS_DENIED)
)
```

### Pipeline Validation

The audit system validates that:
1. **Events occur in the specified order** - later events can't appear before earlier ones
2. **At least one complete pipeline is satisfied** - partial pipelines fail validation
3. **OR groups are properly satisfied** - at least one event from each group occurs
4. **Additional events are allowed** - pipelines define minimum requirements, not maximum

## Usage Examples

### 1. Auth Provider Implementation

```python
class DatabaseAuthProvider(AuthProvider, AuditEnforced):
    
    @AuditRequired(
        AuditEventType.AUTH_ATTEMPT >> AuditEventType.AUTH_SUCCESS >> AuditEventType.SESSION_CREATE |
        AuditEventType.AUTH_ATTEMPT >> AuditEventType.AUTH_FAILURE |
        AuditEventType.AUTH_ATTEMPT >> AuditEventType.RATE_LIMIT_EXCEEDED
    )
    async def authenticate(
        self, 
        credentials: Credentials,
        audit_emitter: AuditEmitter  # Injected by decorator
    ) -> Optional[User]:
        audit_emitter.emit(AuditEventType.AUTH_ATTEMPT, {
            "credential_type": type(credentials).__name__,
            "username": credentials.identifier
        })
        
        # Check rate limiting
        if await self._is_rate_limited(credentials.identifier):
            audit_emitter.emit(AuditEventType.RATE_LIMIT_EXCEEDED, {
                "username": credentials.identifier
            })
            raise RateLimitExceededError("Too many authentication attempts")
        
        try:
            user = await self._verify_credentials(credentials)
            if user:
                audit_emitter.emit(AuditEventType.AUTH_SUCCESS, {
                    "user_id": user.id,
                    "username": user.username
                })
                
                # Create session
                session = await self._create_session(user)
                audit_emitter.emit(AuditEventType.SESSION_CREATE, {
                    "session_id": session.id,
                    "user_id": user.id
                })
                
                return user
            else:
                audit_emitter.emit(AuditEventType.AUTH_FAILURE, {
                    "username": credentials.identifier,
                    "reason": "invalid_credentials"
                })
                return None
        except Exception as e:
            audit_emitter.emit(AuditEventType.AUTH_FAILURE, {
                "username": credentials.identifier,
                "reason": "system_error", 
                "error": str(e)
            })
            raise
```

### 2. Custom Audit Provider

```python
class FileAuditProvider(AuditProvider):
    """File-based audit provider for development/testing."""
    
    def __init__(self, log_file: Path):
        self.log_file = log_file
    
    async def log_event(self, event: AuditEvent) -> None:
        log_entry = {
            "timestamp": event.timestamp.isoformat(),
            "event_type": event.event_type.value,
            "user_id": event.user_id,
            "result": event.result,
            "details": event.details
        }
        
        async with aiofiles.open(self.log_file, 'a') as f:
            await f.write(json.dumps(log_entry) + '\n')
    
    # ... other methods
```

## Security Considerations

1. **Immutable Events**: Audit events should be immutable once logged
2. **Integrity Protection**: Events should be cryptographically signed
3. **Retention Policies**: Configurable retention with automatic archival
4. **Access Control**: Audit logs require elevated permissions to access
5. **Performance**: Async logging to prevent blocking operations
6. **Reliability**: Failed audit logging should halt the operation

## Configuration

```yaml
# serv.config.yaml
auth:
  audit:
    provider: "database"  # file, database, external
    config:
      connection: "audit_db"
      table: "security_audit_log"
      retention_days: 2555  # 7 years for compliance
      encryption_key: "${AUDIT_ENCRYPTION_KEY}"
    
    # Real-time monitoring
    monitoring:
      enabled: true
      alert_thresholds:
        failed_auth_attempts: 5
        time_window: "5m"
      
    # Compliance settings
    compliance:
      standards: ["SOC2", "PCI-DSS", "GDPR"]
      export_format: "json"
      signing_key: "${AUDIT_SIGNING_KEY}"
```

## Testing Strategy

1. **Unit Tests**: Test each audit component in isolation
2. **Integration Tests**: Test audit enforcement across providers
3. **Compliance Tests**: Verify audit trails meet regulatory requirements
4. **Performance Tests**: Ensure audit logging doesn't impact performance
5. **Failure Tests**: Test behavior when audit systems fail